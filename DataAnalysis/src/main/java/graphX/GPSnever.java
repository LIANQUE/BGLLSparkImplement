package com.bj58.graphX;

/*

Created on 2018/12/14 14:07

@author: limu02

*/

import org.apache.commons.lang3.StringUtils;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.broadcast.Broadcast;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.SparkSession;
import scala.Tuple2;
import scala.reflect.ClassTag;
import scala.reflect.ClassTag$;

import java.util.List;
import java.util.Map;

//把当前从未还款的全部经纬度信息拿出，做reduce，取出全部大于1的
public class GPSnever {
    public static void main(String[] args) {
        SparkSession session = SparkSession.builder().appName("").enableHiveSupport().getOrCreate();
        Dataset<Row> data= session.sql("select distinct idCardNo,lat,lon from hdp_jinrong_tech_ods.detail_cl_maidian");


        String[] iddata={"452723198407182817","522731198707292186","440782198508020071","430581198712267283","622922199409120530","510183199108012642","452231199306175519","452402199003022733","441422198408200938","44022919900428161x","510321199301066310","152701198606190618","420521199404175316","440521197908052816","342423199107262818","13012319880811156x","429006198508123978","130602199402191811","450721199002281016","320921199002154246","370282199303104617","52262819820909241x","510125198704240037","429021198610205017","452601198901071537","130702198602091234","460031198412311611","421087199303311612","53012419880920171x","34032119911225437x","430811199211160914","430481198311057933","51072219800126401x","622826199104060856","431226199307116611","142622199105222043","420984199109173630","500383198602161891","350500199210013116","350581199006173532","440184198807020979","320722198606305472","430903199211056610","422129199010100531","440982199302225851","522322199001164218","130321198511013115","422301198204092023","342425198710257712","130728198805207018","450821199309184531","150121198203012519","430923198808015214","330822198208113931","431003198311302839","510622199310114866","420303199409262511","410522198411275868","441825199508230419","310228199212051610","342401198709152699","50010219910816585x","460004199210185050","440221199203012219","152501199403030028","510521198909123797","522731198507198304","350583198601071352","441881199211067471","350627199512241531","210113199204276832","441381199411015011","642223199503284939","45262819951018271x","511023197601276430","522631199209153430","45012119900506484x","522132199202090018","371122199109062539","511002199005136631","532524198409070910","371326199001267619","532522199402260617","622424198611080617","450502199204091229","140123199101092410","350583199507051878","522601199509172803","360735199510123213","450881199509016010","142223199110175119","450721199401087720","520111199004173310","15272219891003091x","412828199210243318","432924198310020110","210213199405043010","440682198810052167","340222199009081029","360424199211033351","430122198703014311","360424199705300579","130427199309010314","532527199611270514","422826199011301510","211224196501133418","500236199609110311","37131219921202511x","530127199609110024","211282199606112418","500240199609065391","62052119970325701x","340223199611213211","450924199207056998","440982199603153193","500226199602252779","640111199303211513","429006199711096017","430821199506214839","360101199711178011","441623199609215513","520103198506246714","513902199712046871","43072519920912102x","14272719910323104x","445122199506252012","440583199408253839","53062919990318231x","450921199808264259","450324199111142231","371421198404095718","370724199105286118","340823198207157017","360429197206130010","652827199904040038","142730199003222275","612427198908113210","520121199012020018","321081198411222119","230505197901140814","350302198803080610","440923199803216398","500242198806061814","130526199801283911","500112199007112292","341182199808263023","533023198611101917","500226199804081541","45072219931009151x","330723199408231014","210282199412194418","220581199805260174","43028119920703003x","37068219940412503x","420106198909210869","440981199309111711","500221198711012719","350181199109051659","522327197903162417","211302198808131640","152122198102192117","64022219921209191x","433001198108281015","360124199802172111","32098119940306271x","500381199911207234","622322199102192019","130727199711203735","230107198708161213","511623199810292877","510681198310100320","330602199912051517","34112519991013487x","500236199404100312","431281199903290215","32038119981121381x","51132319980126267x","500240199810105850","43312719940103341x","350425199108173318","441224199510203736","452331197005202727","341282197606164330","510922199307043573","513822199609063251","330225198805015148","510725199302048314","530322199404281785","610322198904103673","430481198908296910","533321199306101919","500243199909103651","452427199903023130","500384198912075813","350122199802116211","411222199911102532","211421199801213220","120102199109110614","53252919940610363x","15012219910408362x","33100219881219491x","130526199808185257","511321199210087256","320684198409294173","370983198705231336","420503198708102311","622424198810111914","341227198810048716","412828199706260410","445381199312025437","445222199801233530","350322199509253031","130425198904227115","445281199309233010","522130199009017254","450603198702064239","511521198601114377","522622199005166014","360124199811181247","362430199211280319","511502198709198454","23023119980521273x","530629199607240247","412728199811247212","452327198009042433","513723199501034193","500240199508185378","411523199009022813","410221198204205653","341225199305070412","450721198706156438","441723199110183773","431222199107100820","430105197111080533","342222198210016816","53292219881211031x","510422199304152822","500222199906096116","51132119990715595x","422301197004131716","441721198305012328","520102199802198137","410221199710292256","500242199904167852","342422199405101717","610621199710101658","210211199910096751","530323199706171916","610724199903206012","330822199912231813","622226199411022515","511321199504114555","440222198702112910","411528198602055816","342501196501198635","341621199701164329","142730199210221013","37052219980626062x","430581199502170533","632124199106053634","450222199008010339","321322199108285919","320325198502185055","410185199612032115","44122419980527542x","130323199712073218","440882199808047233","421182199503070351","37082819970716563x","420984198809278439","412825199510206739","420321199807052731","330721199504277116","230421198408133310","32108819990629691x","420881199108066214","440981199010292810","522321199903111610","450881199407301734","410225198410261539","420881199805230032","130426198704181139","440981199410055179","362330199512232630","511622199404181331","513023199508218931","522701199311053919","330182199411043716","330903198311062518","44042119910514813x","500235198811275493","441621199312103219","512902197802050479","32128319910519201x","430381199702125015","320724199106032452","41272619901118621x","64222219921203321x","411524199606152735","530324199004161795","610104198810088317","140109199009301032","21148119960316062x","211402199710161921","350525198709154527","520221199201104718","620111199401211046","360722199504012718","530111199505150012","350322199804241551","350321198708154537","360732199609251734","500227199701282814","44050919890806442x","220105199302231015","511529199510011714","450422199803042138","510802199512160022","61012119970309785x","152825199309144819","450329198401281931","51032219961113811x","510602198102103732","430822198803044858","450703199907153016","320829199510040873","330681199811069297","430424199302102314","342425199307197718","532126199002233533","445202198410282415","362233199303033014","410327199102046012","411426199601191214","43072519920611713x","513401199201027122","441426199202033433","340825199011232414","430921198710157078","211021199805266424","445121199608213456","342221198905046513","420205199104105715","522425199002075721","500221199408280133","360502199601026816","413026199512116618","440982198511125414","342501199710273412","445221198806267261","362323197205144814","610113199701030942","420683198412062119","450127199808133616","440781199707204357","430407198805024513","341621199511202515","220122199105205332","430281198808204651","430821199808271011","522124199208179419","330624199603091687","350430197802044032","510504199706300317","632127198302123577","62262419870317147x","210281199801106112","13018519971215311x","362502199003136216","430922199907118954","450702198305238425","622101199603060038","610404196901232043","211121199704261814","220283199011073111","632123199103067030","430124199910055877","432822197105190011","450321199508034539","511381197909100693","632121199810014517","622827196807040635","522322199312120714","421024199702251228","65412319970315183x","500228199707045453","513426199704043914","452229199810036735","422825199910130819","431103199003118423","51190219800822253x","450924199710143618","210282199912120415","452122199906295416","411023199709162019","511113199908150711","53032619950103233x","441823199809116668","412826197512030826","410611199909186011","440902199506282936","511623199810245405","362201198608105255","13012719940215181x","372926198512261111","430523198103024338","410105199904210081","210727199509135433","420881197603155418","433029197312022012","410511199304025025","511303199903281956","43082119980130401x","321281199311045691","370481199309232913","610422199210182717","441423199801063029","622921199605142116","513222199610170334","510181199110061715","321084198504114618","445281199406064335","632125199104010813","513023199705233313","410926199812073230","320122198412101217","511102198504197712","370611198906273227","460003199804182619","500103199004292922","440184199801181258","452224199907194017","530324199806210317","440803199705101510","142601199707198237","420528199307033513","430481199601072335","350521199407297855","410105199911300157","450221199703141414","362322199910210314","220421198909253116","441424199508234892","45032519870805261x","210224199903190418","533123199404061211","420503198801212814","61012519880112391x","360311199201123014","41078119910212261x","412702199907095512","450803199705156126","622822199803111338","533521199512303619","612327197207220013","510502199710037432","150123199009200636","511321199705243855","131081199405260417","450923199908103033","430122198309112140","130926199905282835","32032119950309201x","51342419900525172x","42900619991002485x","130503199002230018","452122199803245117","330328199212103459","360821199911305015","33052219901213291x","513423199301029203","360121198807171210","450121199805121531","533221198912184531","152224199910011524","610404198909245518","511527199908264014","422202199706213812","210211197903185132","341203199212083718","612322198605251010","50038319970110431x","642223199402232013","130582198911184814","450921198708102952","441781199606116631","441781199501196671","533221199306180711","450204197807180316","632127199612070030","152321199612047576","642223199909300628","130321199605280024","460002199511294143","450121199506050032","510503199901177012","340823199605174431","511526199705211530","522630199412070423","469003199601025312","510722199509115036","330501199804282818","640381198001101859","500110198903050416","320723199806023817","522328199510280872","230406199911300412","220382199810103718","500222198402205214","450923199209086473","371122199409054610","622822198504163934","410823199803180398","360124199907041513","362502199901097810","420821199209290016","510121199809111767","431021199903238575","522128199610274030","220283199909121511","440825199007040325","421023198508028312","370112199709174514","360730199111085916","431021199902050079","441611197712133335","152222199112162827","140421199110060019","33100219950812433x","452624199609073315","231084199906141339","433127199401170019","441224199910027014","500236199308061317","522122199905242513","51032219911117347x","230303199101105215","441623199509160631"};

        ClassTag<String[]> strTag = ClassTag$.MODULE$.apply(String[].class);
        Broadcast<String[]> str=session.sparkContext().broadcast(iddata,strTag);
        /*
        * 匹配身份证，合并经纬度字段，建立key
        * */
        JavaRDD<Row> d1 = data.toJavaRDD().filter(new Function<Row, Boolean>() {
            @Override
            public Boolean call(Row row) throws Exception {
                for (String s : str.value()){
                    if (row.getString(0).equals(s)){
                        return true;
                    }
                }
                return false;
            }
        });

        List<Row> t1= d1.take(10);
        for(Row r:t1){
            System.out.println("检测原始筛选结果"+r);
        }

        JavaPairRDD<String,String> jps = d1.map(new Function<Row, Tuple2<String,String>>() {
            @Override
            public Tuple2<String, String> call(Row row) throws Exception {
                String id=row.getString(0);
                String lat=row.getString(1);
                String lon = row.getString(2);
                if(StringUtils.isBlank(lat)||StringUtils.isBlank(lon)){
                    return new Tuple2<>("0",row.getString(0));
                }else{
                    return new Tuple2<>(lat+"/"+lon,row.getString(0));
                }

            }
        }).filter(new Function<Tuple2<String, String>, Boolean>() {
            @Override
            public Boolean call(Tuple2<String, String> stringStringTuple2) throws Exception {
                if (stringStringTuple2._1.equals("0")){
                    return false;
                }
                return true;
            }
        }).mapToPair(new PairFunction<Tuple2<String, String>, String, String>() {
            @Override
            public Tuple2<String, String> call(Tuple2<String, String> stringStringTuple2) throws Exception {
                return new Tuple2<>(stringStringTuple2._1,stringStringTuple2._2);
            }
        });
        List<Tuple2<String,String>> t2= jps.take(10);
        for(Tuple2<String,String> r:t2){
            System.out.println("检测reduce前的结果"+r);
        }

        JavaPairRDD<String,String> res=jps.reduceByKey(new Function2<String, String, String>() {
            @Override
            public String call(String s, String s2) throws Exception {
                return s+"/"+s2;
            }
        }).filter(new Function<Tuple2<String, String>, Boolean>() {
            @Override
            public Boolean call(Tuple2<String, String> stringStringTuple2) throws Exception {
                String[] s=stringStringTuple2._2.split("/");
                if (s.length>1){
                    return true;
                }
                return false;
            }
        });
        List<Tuple2<String,String>> fin = res.collect();
        System.out.println("检测输出结果");
        for (Tuple2<String,String> tuo :fin){
            System.out.println(tuo);
        }


    }
}
